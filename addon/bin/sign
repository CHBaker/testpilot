#!/usr/bin/env node
/*
 * This Source Code is subject to the terms of the Mozilla Public License
 * version 2.0 (the 'License'). You can obtain a copy of the License at
 * http://mozilla.org/MPL/2.0/.
 */
/*
 * This script is for signing, packaging, and distributing the testpilot
 * add-on. If the current package version has already been signed, we generate
 * an update.rdf, download the signed xpi from amo, and move the files into
 * the testpilot project.
 * If the package version has not been signed, we build the xpi and update.rdf,
 * sign the xpi, and move them into the testpilot project.
 *
 */
var fs = require('fs');
var path = require('path');
var request = require('request');
var jwt = require('jsonwebtoken');

var manifestFilename = __dirname + '/../build/package.json';
var manifest = require(manifestFilename);
var version = manifest.version;
var apiKey = process.env['AMO_USER'];
var apiSecret = process.env['AMO_SECRET'];

var authToken = jwt.sign({iss: apiKey}, apiSecret, {
  algorithm: "HS256",
  expiresIn: 60
});

var signedOpts = {
  url: 'https://addons.mozilla.org/api/v3/addons/@' + manifest.name + '/versions/'+version+ '/',
  headers: {
    'Authorization': 'JWT ' + authToken
  }
};

request(signedOpts, signCb);

function signCb(err, resp, body) {
  if (!err && resp.statusCode == 200) {
    var info = JSON.parse(body);
    if (info.files.length) {
      var ws = fs.createWriteStream('addon.xpi');
      signedOpts.url = info.files[0].download_url;
      request(signedOpts).pipe(ws);
    }
  } else distAddon();
}

function distAddon() {
  signAddon('addon.xpi', function(err, signedXpiPath) {
    if (err) return console.error(err);
    checkExistsAndMv(signedXpiPath, 'addon.xpi', function(err) {
      if (err) return console.error(err);
      console.log('addon.xpi written to addon.xpi');
    });
  });
}

function signAddon(xpiPath, cb) {
  require('jpm/lib/sign').sign({
    apiKey: apiKey,
    apiSecret: apiSecret,
    xpi: xpiPath
  }).then(function(result) {
    if (result.success) cb(null, result.downloadedFiles[0]);
  }).catch(cb);
}

function checkExistsAndMv(fromFilePath, toFilePath, cb) {
  fs.stat(fromFilePath, function(err) {
    if (err) return cb(err);
    fs.rename(fromFilePath, toFilePath, function(err) {
      if (err) return cb(err);
      else cb();
    });
  });
}
